from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import HTMLResponse
from openai import OpenAI
from dotenv import load_dotenv
import os

load_dotenv()
client = OpenAI()


app = FastAPI(
    title="SpaceScenes API",
    version="1.0.0",
    description="Intergalactical Story Generator",
)

# === CONFIGURATION CORS (pour futur lien avec interface web ou Figma) ===
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # üîí √† restreindre plus tard √† ton site
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# === D√âFINITION DE L'IA ===
AI_NAME = "Storystellar"
AI_PERSONALITY = """
Tu es un g√©n√©rateur d‚Äôaventures interactives dans un univers de science-fiction.
Tu g√©n√®res des aventures interactives dans un univers de science-fiction
inspir√© de Star Wars mais sans le citer directement.
Ne te prononce jamais sur le nom de l'IA. Ne parle jamais de star wars.
Ne te pr√©sente jamais. Ne r√©ponds jamais √† la question "comment tu t'appelles ?"
N'√©cris jamais en √©criture inclusive. 

üéØ R√®gles :
- Ne te pr√©sente jamais et ne dis jamais ton nom.
- Ne parle jamais de Star Wars, de Jedi ou de la Force.
- N‚Äôutilise pas d‚Äô√©criture inclusive.
- Garde toujours un ton immersif, narratif et cin√©matographique.
- Pour chaque sc√®ne, tu dois proposer des choix √† l‚Äôutilisateur, num√©rot√©s entre parenth√®ses.

üöÄ D√©roulement :
Avant de commencer une aventure, tu dois OBLIGATOIREMENT demander :
"Souhaitez-vous incarner un homme (1) ou une femme (2) ou un √™tre moins facile √† d√©finir (3)?"
tu dois TOUJOURS proposer exactement 3 choix √† l‚Äôutilisateur.
Quand tu poses des choix √† l‚Äôutilisateur, tu dois TOUJOURS les num√©roter entre parenth√®ses
comme ceci :
(1) Texte du premier choix
(2) Texte du deuxi√®me choix
(3) Texte du troisi√®me choix 

‚ö†Ô∏è Tr√®s important :
- Tant que l‚Äôutilisateur n‚Äôa pas fait son choix (1), (2) ou (3), 
  tu NE DOIS PAS commencer l‚Äôhistoire, ni d√©crire le monde, ni introduire un sc√©nario.
- Une fois le choix re√ßu, tu peux commencer √† g√©n√©rer un sc√©nario original 
  dans un style cin√©matographique immersif, coh√©rent et d√©taill√©.
- √Ä partir de l√†, √† la fin de CHAQUE sc√®ne, tu dois proposer exactement trois choix
  (1), (2) et (3) pour permettre √† l‚Äôutilisateur de continuer l‚Äôaventure.

üß† Format obligatoire :
- Tes r√©ponses doivent toujours se terminer par les trois choix num√©rot√©s.
- Ne jamais √©crire de texte apr√®s les choix.
- Ne jamais reformuler ou redemander le choix du joueur.

N‚Äôajoute jamais de texte apr√®s la liste des choix.
Ne demande jamais √† l‚Äôutilisateur d‚Äô√©crire, il choisira un bouton num√©rot√©.
Ne commence jamais l‚Äôhistoire tant que l‚Äôutilisateur n‚Äôa pas r√©pondu √† cette question."
"""



# === ROUTE DE TEST (home) ===

@app.get("/", response_class=HTMLResponse)
def home():
    return """
    <html>
      <head>
        <title>SpaceScenes - Intergalactic Adventures</title>
        <style>
          body {
            background-color: black;
            color: #FFE81F;
            font-family: 'Courier New', monospace;
            text-align: center;
            padding-top: 80px;
          }
          #story {
            width: 80%;
            margin: 40px auto;
            text-align: left;
            white-space: pre-wrap;
            font-size: 20px;
            line-height: 1.6;
            min-height: 200px;
          }
          button {
            background-color: #FFE81F;
            color: black;
            border: none;
            padding: 15px 30px;
            font-size: 18px;
            font-weight: bold;
            cursor: pointer;
            border-radius: 10px;
          }
          button:hover {
            background-color: #fff176;
          }
        </style>
      </head>
      <body>
        <h1>üöÄ Bienvenue dans SpaceScenes</h1>
        <p>Je suis Storystellar, narrateur de l'espace.<br>
        Choisissez votre destin parmi les √©toiles‚Ä¶</p>

        <button onclick="startAdventure()">D√©marrer l'aventure</button>

         <div id="story"></div>
         <div id="choices" style="margin-top: 20px; display: none;"></div>

         <script>
          let isWriting = false; // üîí Pour √©viter plusieurs clics simultan√©s

          async function startAdventure() {
            if (isWriting) return; // Emp√™che de relancer pendant l‚Äô√©criture
        
            const storyDiv = document.getElementById('story');
            storyDiv.innerHTML = "Chargement de la premi√®re sc√®ne...<br>";
            
            isWriting = true; // üîí Bloque les clics pendant le texte
        
            const res = await fetch('/chat', {
              method: 'POST',
              headers: {'Content-Type': 'application/json'},
              body: JSON.stringify({ message: 'Salut, d√©marre une aventure.' })
            });
            
            const data = await res.json();
            const text = data.response || "Erreur de communication avec le vaisseau IA.";
        
            // R√©initialise le contenu avant d‚Äô√©crire
            storyDiv.innerHTML = "";
            await typeWriter(text, storyDiv);
        
            isWriting = false; // üîì D√©bloque apr√®s √©criture
          }
        
          async function typeWriter(text, element) {
            element.innerHTML = "";
            for (let i = 0; i < text.length; i++) {
              element.innerHTML += text.charAt(i);
              await new Promise(r => setTimeout(r, 20));
            }
          
            // üß© D√©tecte dynamiquement les choix num√©rot√©s (1), (2), (3), etc.
            const matches = text.match(/\(\d+\)/g);
            if (matches) {
              const choicesDiv = document.getElementById('choices');
              choicesDiv.innerHTML = "";
              choicesDiv.style.display = "block";
            
              // Cr√©e un bouton pour chaque choix d√©tect√©
              matches.forEach(match => {
                const number = match.match(/\d+/)[0];
                const btn = document.createElement("button");
                btn.className = "choice-btn";
                btn.textContent = match;
                btn.onclick = () => sendChoice(number);
                choicesDiv.appendChild(btn);
              });
            }
          }
          
          async function sendChoice(number) {
            const storyDiv = document.getElementById('story');
            const choicesDiv = document.getElementById('choices');
            choicesDiv.style.display = "none";
            
            storyDiv.innerHTML += `<br><em>‚Üí Choix (${number}) s√©lectionn√©</em><br><br>`;
          
            const res = await fetch('/chat', {
              method: 'POST',
              headers: {'Content-Type': 'application/json'},
              body: JSON.stringify({ message: `Je choisis l'option (${number})` })
            });
          
            const data = await res.json();
            await typeWriter(data.response, storyDiv);
          }

        </script>
      </body>
    </html>
    """


# === ROUTE /CHAT ‚Äî pour parler √† l'IA ===
@app.post("/chat")
async def chat(user_message: dict):
    prompt = user_message.get("message", "")
    if not prompt:
        raise HTTPException(status_code=400, detail="Le champ 'message' est requis.")

    try:
        response = client.chat.completions.create(
            model="gpt-4o-mini",  # ou "gpt-4o" si tu veux plus de puissance
            messages=[
                {"role": "system", "content": AI_PERSONALITY},
                {"role": "user", "content": prompt}
            ],
        )

        return {"response": response.choices[0].message.content}

    except Exception as e:
        import traceback
        print("‚ùå ERREUR /chat :", traceback.format_exc())
        raise HTTPException(status_code=500, detail=f"Erreur interne : {str(e)}")

# === FIN DU FICHIER ===
print("üöÄ SpaceScenes API lanc√©e avec ChatGPT ‚Äî ready to fly among the stars üåå")